
==================== FINAL INTERFACE ====================
2017-11-26 22:41:13.366176 UTC

interface bob-1.0.0.3-7xyVNrkmtkfFaDzQ2EHBfW:Bob 8002
  interface hash: 76e90591c50a26fc051624f1aef3ff86
  ABI hash: eea6dee0434697a41f2a8fdaf0b53905
  export-list hash: 61950612294cf30957c06551336d824f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Bob.responseFor
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
690a1e62fbe94fbcd3efd782987e2912
  $tc'Default :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11428523874656207137##
                   17023266827135062746##
                   Bob.$trModule
                   Bob.$tc'Default1) -}
a8517d4ce9317a546d115c74710aa5f1
  $tc'Default1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Default"#) -}
252b3e276fb48c239c163548388de1cb
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10796285408694977689##
                   5707412666883217286##
                   Bob.$trModule
                   Bob.$tc'Empty1) -}
00e9d27bb3455c50ac1a4d009b7c384a
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
486d04491a61e55d70209b9bdc33d299
  $tc'Question :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   486899908539639194##
                   7630690965151994005##
                   Bob.$trModule
                   Bob.$tc'Question1) -}
cc70f5210d6229f63906c47cd055c7f4
  $tc'Question1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Question"#) -}
b73f48b4a910763af60e5d278293495a
  $tc'Yell :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16040746491031029679##
                   289927385812114423##
                   Bob.$trModule
                   Bob.$tc'Yell1) -}
4a3d18a061b9fd8b52282966626ba1f8
  $tc'Yell1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Yell"#) -}
f964f0592b0382bd197f947f52814243
  $tcQuestionType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8972444224304301840##
                   14555231388279489904##
                   Bob.$trModule
                   Bob.$tcQuestionType1) -}
c3b32dfbbff2fa7e23d87c79b782ba34
  $tcQuestionType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "QuestionType"#) -}
ead4f7e2f0494587c4fdaa4ab80624fb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Bob.$trModule2 Bob.$trModule1) -}
a5e5a3474153bbe93ebd3bc580cd84d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bob"#) -}
40b64e6d94dbcb67caed7df2a84d0f68
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "bob-1.0.0.3-7xyVNrkmtkfFaDzQ2EHBfW"#) -}
358e2e56572e491b31247978bf8ba027
  data QuestionType = Question | Yell | Empty | Default
bd32cc4a8fcce67edc2761d44eed7984
  responseFor :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   sanitisedString :: [GHC.Types.Char]
                   = GHC.List.filter @ GHC.Types.Char Bob.responseFor5 xs
                 } in
                 case (Bob.responseFor_go4 sanitisedString)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False
                   -> case (Bob.responseFor_go3 sanitisedString)
                             `cast`
                           (Data.Monoid.N:Any[0]) of wild1 {
                        GHC.Types.False
                        -> case (Bob.responseFor_go2 sanitisedString)
                                  `cast`
                                (Data.Monoid.N:Any[0]) of wild2 {
                             GHC.Types.False
                             -> case Bob.responseFor_go1
                                       sanitisedString
                                       (GHC.List.lastError
                                          @ GHC.Types.Char) of wild3 { GHC.Types.C# x ->
                                case x of wild4 {
                                  DEFAULT -> Bob.responseFor4 '?'# -> Bob.responseFor3 } }
                             GHC.Types.True -> Bob.responseFor2 }
                        GHC.Types.True
                        -> case Bob.responseFor_go
                                  sanitisedString
                                  (GHC.List.lastError @ GHC.Types.Char) of wild2 { GHC.Types.C# x ->
                           case x of wild3 {
                             DEFAULT -> Bob.responseFor4 '?'# -> Bob.responseFor3 } } }
                   GHC.Types.True -> Bob.responseFor1 }) -}
d4e6b8e3043e3282c9af3ee1eaf7d803
  responseFor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fine. Be that way!"#) -}
ec44df83ccf40ca4fa9025a389ffea07
  responseFor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Whoa, chill out!"#) -}
c7872db6759bff6061507cbb56dc8fb4
  responseFor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sure."#) -}
ed93ce0d683506f3c5be5da8b5a2f051
  responseFor4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Whatever."#) -}
5e7e38a5e84c7d748dcbcbe790300e5d
  responseFor5 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True ' '# -> GHC.Types.False } }) -}
ca500546b906eca1fa174edd835f8b0f
  responseFor_go ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
8cab6b5d5f043cad72dacdec8b230934
  responseFor_go1 ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
977453e7c784c7b35b1751b9eed2969f
  responseFor_go2 :: [GHC.Types.Char] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
833915b2e4cf20229df306ace0344a11
  responseFor_go3 :: [GHC.Types.Char] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fa150f33399b3f2902a9e7141a6c2a62
  responseFor_go4 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

